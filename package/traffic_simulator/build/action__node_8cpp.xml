<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="action__node_8cpp" kind="file" language="C++">
    <compoundname>action_node.cpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">memory</includes>
    <includes local="no">scenario_simulator_exception/exception.hpp</includes>
    <includes local="no">set</includes>
    <includes local="no">string</includes>
    <includes refid="action__node_8hpp" local="no">traffic_simulator/behavior/action_node.hpp</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="3849">
        <label>scenario_simulator_exception/exception.hpp</label>
      </node>
      <node id="3902">
        <label>traffic_simulator/traffic_lights/traffic_light_state.hpp</label>
        <link refid="traffic__light__state_8hpp_source"/>
        <childnode refid="3903" relation="include">
        </childnode>
        <childnode refid="3904" relation="include">
        </childnode>
        <childnode refid="3905" relation="include">
        </childnode>
      </node>
      <node id="3909">
        <label>iomanip</label>
      </node>
      <node id="3865">
        <label>queue</label>
      </node>
      <node id="3912">
        <label>limits</label>
      </node>
      <node id="3881">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="3846">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/behavior/action_node.cpp</label>
        <link refid="action__node_8cpp"/>
        <childnode refid="3847" relation="include">
        </childnode>
        <childnode refid="3848" relation="include">
        </childnode>
        <childnode refid="3849" relation="include">
        </childnode>
        <childnode refid="3850" relation="include">
        </childnode>
        <childnode refid="3851" relation="include">
        </childnode>
        <childnode refid="3852" relation="include">
        </childnode>
        <childnode refid="3901" relation="include">
        </childnode>
        <childnode refid="3900" relation="include">
        </childnode>
        <childnode refid="3899" relation="include">
        </childnode>
      </node>
      <node id="3863">
        <label>openscenario_msgs/msg/entity_type.hpp</label>
      </node>
      <node id="3916">
        <label>std_msgs/msg/color_rgba.hpp</label>
      </node>
      <node id="3880">
        <label>geographic_msgs/msg/geo_point.hpp</label>
      </node>
      <node id="3856">
        <label>openscenario_msgs/msg/waypoints_array.hpp</label>
      </node>
      <node id="3874">
        <label>lanelet2_routing/RoutingGraph.h</label>
      </node>
      <node id="3917">
        <label>traffic_simulator/traffic_lights/traffic_light_phase.hpp</label>
        <link refid="traffic__light__phase_8hpp_source"/>
        <childnode refid="3912" relation="include">
        </childnode>
        <childnode refid="3849" relation="include">
        </childnode>
        <childnode refid="3866" relation="include">
        </childnode>
        <childnode refid="3900" relation="include">
        </childnode>
        <childnode refid="3899" relation="include">
        </childnode>
      </node>
      <node id="3869">
        <label>lanelet2_core/geometry/Lanelet.h</label>
      </node>
      <node id="3908">
        <label>autoware_perception_msgs/msg/traffic_light_state_array.hpp</label>
      </node>
      <node id="3852">
        <label>traffic_simulator/behavior/action_node.hpp</label>
        <link refid="action__node_8hpp_source"/>
        <childnode refid="3853" relation="include">
        </childnode>
        <childnode refid="3854" relation="include">
        </childnode>
        <childnode refid="3848" relation="include">
        </childnode>
        <childnode refid="3855" relation="include">
        </childnode>
        <childnode refid="3856" relation="include">
        </childnode>
        <childnode refid="3851" relation="include">
        </childnode>
        <childnode refid="3857" relation="include">
        </childnode>
        <childnode refid="3866" relation="include">
        </childnode>
        <childnode refid="3918" relation="include">
        </childnode>
        <childnode refid="3890" relation="include">
        </childnode>
        <childnode refid="3907" relation="include">
        </childnode>
        <childnode refid="3901" relation="include">
        </childnode>
        <childnode refid="3899" relation="include">
        </childnode>
      </node>
      <node id="3862">
        <label>openscenario_msgs/msg/entity_status.hpp</label>
      </node>
      <node id="3903">
        <label>autoware_perception_msgs/msg/lamp_state.hpp</label>
      </node>
      <node id="3895">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="3864">
        <label>openscenario_msgs/msg/vehicle_parameters.hpp</label>
      </node>
      <node id="3914">
        <label>cassert</label>
      </node>
      <node id="3905">
        <label>stdexcept</label>
      </node>
      <node id="3897">
        <label>openscenario_msgs/msg/hermite_curve.hpp</label>
      </node>
      <node id="3851">
        <label>string</label>
      </node>
      <node id="3855">
        <label>openscenario_msgs/msg/obstacle.hpp</label>
      </node>
      <node id="3884">
        <label>lanelet2_extension_psim/utility/utilities.hpp</label>
      </node>
      <node id="3887">
        <label>traffic_simulator/hdmap_utils/cache.hpp</label>
        <link refid="cache_8hpp_source"/>
        <childnode refid="3859" relation="include">
        </childnode>
        <childnode refid="3888" relation="include">
        </childnode>
        <childnode refid="3889" relation="include">
        </childnode>
        <childnode refid="3849" relation="include">
        </childnode>
        <childnode refid="3890" relation="include">
        </childnode>
        <childnode refid="3901" relation="include">
        </childnode>
        <childnode refid="3899" relation="include">
        </childnode>
      </node>
      <node id="3885">
        <label>map</label>
      </node>
      <node id="3893">
        <label>traffic_simulator/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="3894" relation="include">
        </childnode>
        <childnode refid="3859" relation="include">
        </childnode>
        <childnode refid="3888" relation="include">
        </childnode>
        <childnode refid="3895" relation="include">
        </childnode>
        <childnode refid="3896" relation="include">
        </childnode>
        <childnode refid="3897" relation="include">
        </childnode>
        <childnode refid="3898" relation="include">
        </childnode>
        <childnode refid="3899" relation="include">
        </childnode>
      </node>
      <node id="3913">
        <label>traffic_simulator/color_utils/color_utils.hpp</label>
        <link refid="color__utils_8hpp_source"/>
        <childnode refid="3914" relation="include">
        </childnode>
        <childnode refid="3915" relation="include">
        </childnode>
        <childnode refid="3885" relation="include">
        </childnode>
        <childnode refid="3916" relation="include">
        </childnode>
        <childnode refid="3851" relation="include">
        </childnode>
      </node>
      <node id="3860">
        <label>openscenario_msgs/msg/bounding_box.hpp</label>
      </node>
      <node id="3886">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="3873">
        <label>lanelet2_routing/RoutingCost.h</label>
      </node>
      <node id="3878">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="3866">
        <label>traffic_simulator/hdmap_utils/hdmap_utils.hpp</label>
        <link refid="hdmap__utils_8hpp_source"/>
        <childnode refid="3867" relation="include">
        </childnode>
        <childnode refid="3868" relation="include">
        </childnode>
        <childnode refid="3869" relation="include">
        </childnode>
        <childnode refid="3870" relation="include">
        </childnode>
        <childnode refid="3871" relation="include">
        </childnode>
        <childnode refid="3872" relation="include">
        </childnode>
        <childnode refid="3873" relation="include">
        </childnode>
        <childnode refid="3874" relation="include">
        </childnode>
        <childnode refid="3875" relation="include">
        </childnode>
        <childnode refid="3876" relation="include">
        </childnode>
        <childnode refid="3877" relation="include">
        </childnode>
        <childnode refid="3878" relation="include">
        </childnode>
        <childnode refid="3879" relation="include">
        </childnode>
        <childnode refid="3859" relation="include">
        </childnode>
        <childnode refid="3880" relation="include">
        </childnode>
        <childnode refid="3881" relation="include">
        </childnode>
        <childnode refid="3882" relation="include">
        </childnode>
        <childnode refid="3883" relation="include">
        </childnode>
        <childnode refid="3884" relation="include">
        </childnode>
        <childnode refid="3885" relation="include">
        </childnode>
        <childnode refid="3848" relation="include">
        </childnode>
        <childnode refid="3862" relation="include">
        </childnode>
        <childnode refid="3886" relation="include">
        </childnode>
        <childnode refid="3851" relation="include">
        </childnode>
        <childnode refid="3887" relation="include">
        </childnode>
        <childnode refid="3893" relation="include">
        </childnode>
        <childnode refid="3902" relation="include">
        </childnode>
        <childnode refid="3901" relation="include">
        </childnode>
        <childnode refid="3900" relation="include">
        </childnode>
        <childnode refid="3899" relation="include">
        </childnode>
        <childnode refid="3906" relation="include">
        </childnode>
      </node>
      <node id="3891">
        <label>exception</label>
      </node>
      <node id="3918">
        <label>traffic_simulator/helper/stop_watch.hpp</label>
        <link refid="stop__watch_8hpp_source"/>
        <childnode refid="3859" relation="include">
        </childnode>
        <childnode refid="3919" relation="include">
        </childnode>
        <childnode refid="3904" relation="include">
        </childnode>
        <childnode refid="3851" relation="include">
        </childnode>
      </node>
      <node id="3867">
        <label>geometry_msgs/msg/vector3.h</label>
      </node>
      <node id="3896">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="3861">
        <label>openscenario_msgs/msg/driver_model.hpp</label>
      </node>
      <node id="3911">
        <label>autoware_perception_msgs/msg/traffic_light_state.hpp</label>
      </node>
      <node id="3872">
        <label>lanelet2_routing/Route.h</label>
      </node>
      <node id="3883">
        <label>lanelet2_extension_psim/utility/query.hpp</label>
      </node>
      <node id="3894">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="3853">
        <label>behaviortree_cpp_v3/action_node.h</label>
      </node>
      <node id="3882">
        <label>lanelet2_extension_psim/utility/message_conversion.hpp</label>
      </node>
      <node id="3888">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="3915">
        <label>cstdio</label>
      </node>
      <node id="3854">
        <label>boost/algorithm/clamp.hpp</label>
      </node>
      <node id="3892">
        <label>openscenario_msgs/msg/catmull_rom_spline.hpp</label>
      </node>
      <node id="3899">
        <label>vector</label>
      </node>
      <node id="3858">
        <label>autoware_vehicle_msgs/msg/vehicle_command.hpp</label>
      </node>
      <node id="3900">
        <label>utility</label>
      </node>
      <node id="3898">
        <label>traffic_simulator/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="3899" relation="include">
        </childnode>
      </node>
      <node id="3876">
        <label>lanelet2_traffic_rules/TrafficRulesFactory.h</label>
      </node>
      <node id="3890">
        <label>traffic_simulator/math/catmull_rom_spline.hpp</label>
        <link refid="catmull__rom__spline_8hpp_source"/>
        <childnode refid="3891" relation="include">
        </childnode>
        <childnode refid="3888" relation="include">
        </childnode>
        <childnode refid="3892" relation="include">
        </childnode>
        <childnode refid="3851" relation="include">
        </childnode>
        <childnode refid="3893" relation="include">
        </childnode>
        <childnode refid="3900" relation="include">
        </childnode>
        <childnode refid="3899" relation="include">
        </childnode>
      </node>
      <node id="3871">
        <label>lanelet2_core/primitives/LaneletSequence.h</label>
      </node>
      <node id="3904">
        <label>iostream</label>
      </node>
      <node id="3868">
        <label>lanelet2_core/LaneletMap.h</label>
      </node>
      <node id="3910">
        <label>traffic_simulator/traffic_lights/traffic_light.hpp</label>
        <link refid="traffic__light_8hpp_source"/>
        <childnode refid="3911" relation="include">
        </childnode>
        <childnode refid="3904" relation="include">
        </childnode>
        <childnode refid="3912" relation="include">
        </childnode>
        <childnode refid="3905" relation="include">
        </childnode>
        <childnode refid="3913" relation="include">
        </childnode>
        <childnode refid="3917" relation="include">
        </childnode>
        <childnode refid="3902" relation="include">
        </childnode>
        <childnode refid="3901" relation="include">
        </childnode>
        <childnode refid="3900" relation="include">
        </childnode>
        <childnode refid="3899" relation="include">
        </childnode>
      </node>
      <node id="3907">
        <label>traffic_simulator/traffic_lights/traffic_light_manager.hpp</label>
        <link refid="traffic__light__manager_8hpp_source"/>
        <childnode refid="3908" relation="include">
        </childnode>
        <childnode refid="3909" relation="include">
        </childnode>
        <childnode refid="3848" relation="include">
        </childnode>
        <childnode refid="3886" relation="include">
        </childnode>
        <childnode refid="3905" relation="include">
        </childnode>
        <childnode refid="3851" relation="include">
        </childnode>
        <childnode refid="3866" relation="include">
        </childnode>
        <childnode refid="3910" relation="include">
        </childnode>
        <childnode refid="3901" relation="include">
        </childnode>
        <childnode refid="3900" relation="include">
        </childnode>
        <childnode refid="3899" relation="include">
        </childnode>
        <childnode refid="3906" relation="include">
        </childnode>
      </node>
      <node id="3901">
        <label>unordered_map</label>
      </node>
      <node id="3879">
        <label>autoware_auto_msgs/msg/had_map_bin.hpp</label>
      </node>
      <node id="3906">
        <label>visualization_msgs/msg/marker_array.hpp</label>
      </node>
      <node id="3889">
        <label>mutex</label>
      </node>
      <node id="3870">
        <label>lanelet2_core/primitives/BasicRegulatoryElements.h</label>
      </node>
      <node id="3857">
        <label>traffic_simulator/entity/entity_base.hpp</label>
        <link refid="entity__base_8hpp_source"/>
        <childnode refid="3858" relation="include">
        </childnode>
        <childnode refid="3859" relation="include">
        </childnode>
        <childnode refid="3848" relation="include">
        </childnode>
        <childnode refid="3860" relation="include">
        </childnode>
        <childnode refid="3861" relation="include">
        </childnode>
        <childnode refid="3862" relation="include">
        </childnode>
        <childnode refid="3863" relation="include">
        </childnode>
        <childnode refid="3855" relation="include">
        </childnode>
        <childnode refid="3864" relation="include">
        </childnode>
        <childnode refid="3856" relation="include">
        </childnode>
        <childnode refid="3865" relation="include">
        </childnode>
        <childnode refid="3851" relation="include">
        </childnode>
        <childnode refid="3866" relation="include">
        </childnode>
        <childnode refid="3907" relation="include">
        </childnode>
        <childnode refid="3901" relation="include">
        </childnode>
        <childnode refid="3899" relation="include">
        </childnode>
        <childnode refid="3906" relation="include">
        </childnode>
      </node>
      <node id="3875">
        <label>lanelet2_routing/RoutingGraphContainer.h</label>
      </node>
      <node id="3919">
        <label>chrono</label>
      </node>
      <node id="3859">
        <label>boost/optional.hpp</label>
      </node>
      <node id="3877">
        <label>tf2/LinearMath/Matrix3x3.h</label>
      </node>
      <node id="3850">
        <label>set</label>
      </node>
      <node id="3847">
        <label>algorithm</label>
      </node>
      <node id="3848">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceentity__behavior">entity_behavior</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;scenario_simulator_exception/exception.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/behavior/action_node.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceentity__behavior" kindref="compound">entity_behavior</ref></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal">ActionNode::ActionNode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BT::NodeConfiguration<sp/>&amp;<sp/>config)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">:<sp/>BT::ActionNodeBase(name,<sp/>config)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">BT::NodeStatus<sp/>ActionNode::executeTick()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BT::ActionNodeBase::executeTick();<sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ActionNode::getBlackBoardValues()</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classSimModelInterface_1aec1734ae15cfadbe42d35ff3a0eacf1c" kindref="member">getInput</ref>(</highlight><highlight class="stringliteral">&quot;request&quot;</highlight><highlight class="normal">,<sp/>request))<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>input<sp/>request<sp/>in<sp/>ActionNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getInput&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;step_time&quot;</highlight><highlight class="normal">,<sp/>step_time))<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>input<sp/>step_time<sp/>in<sp/>ActionNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getInput&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;current_time&quot;</highlight><highlight class="normal">,<sp/>current_time))<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>input<sp/>current_time<sp/>in<sp/>ActionNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classSimModelInterface_1aec1734ae15cfadbe42d35ff3a0eacf1c" kindref="member">getInput</ref>&lt;std::shared_ptr&lt;hdmap_utils::HdMapUtils&gt;&gt;(</highlight><highlight class="stringliteral">&quot;hdmap_utils&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>))<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>input<sp/>hdmap_utils<sp/>in<sp/>ActionNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classSimModelInterface_1aec1734ae15cfadbe42d35ff3a0eacf1c" kindref="member">getInput</ref>&lt;std::shared_ptr&lt;traffic_simulator::TrafficLightManager&gt;&gt;(</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;traffic_light_manager&quot;</highlight><highlight class="normal">,<sp/>traffic_light_manager))<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>input<sp/>traffic_light_manager<sp/>in<sp/>ActionNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getInput&lt;openscenario_msgs::msg::EntityStatus&gt;(</highlight><highlight class="stringliteral">&quot;entity_status&quot;</highlight><highlight class="normal">,<sp/>entity_status))<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>input<sp/>entity_status<sp/>in<sp/>ActionNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classSimModelInterface_1aec1734ae15cfadbe42d35ff3a0eacf1c" kindref="member">getInput</ref>&lt;boost::optional&lt;double&gt;&gt;(</highlight><highlight class="stringliteral">&quot;target_speed&quot;</highlight><highlight class="normal">,<sp/>target_speed))<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>target_speed<sp/>=<sp/>boost::none;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classSimModelInterface_1aec1734ae15cfadbe42d35ff3a0eacf1c" kindref="member">getInput</ref>&lt;std::unordered_map&lt;std::string,<sp/>openscenario_msgs::msg::EntityStatus&gt;&gt;(</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;other_entity_status&quot;</highlight><highlight class="normal">,<sp/>other_entity_status))<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>input<sp/>other_entity_status<sp/>in<sp/>ActionNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classSimModelInterface_1aec1734ae15cfadbe42d35ff3a0eacf1c" kindref="member">getInput</ref>&lt;std::unordered_map&lt;std::string,<sp/>openscenario_msgs::msg::EntityType&gt;&gt;(</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;entity_type_list&quot;</highlight><highlight class="normal">,<sp/>entity_type_list))<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>input<sp/>entity_type_list<sp/>in<sp/>ActionNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classSimModelInterface_1aec1734ae15cfadbe42d35ff3a0eacf1c" kindref="member">getInput</ref>&lt;std::vector&lt;std::int64_t&gt;&gt;(</highlight><highlight class="stringliteral">&quot;route_lanelets&quot;</highlight><highlight class="normal">,<sp/>route_lanelets))<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>input<sp/>route_lanelets<sp/>in<sp/>ActionNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ActionNode::getHorizon()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="74"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::algorithm::clamp(entity_status.action_status.twist.linear.x<sp/>*<sp/>5,<sp/>20,<sp/>50);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">openscenario_msgs::msg::EntityStatus<sp/>ActionNode::stopAtEndOfRoad()</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::EntityStatus<sp/>entity_status_updated<sp/>=<sp/>entity_status;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>entity_status_updated.time<sp/>=<sp/>current_time<sp/>+<sp/>step_time;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>entity_status_updated.action_status.twist<sp/>=<sp/>geometry_msgs::msg::Twist();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>entity_status_updated.action_status.accel<sp/>=<sp/>geometry_msgs::msg::Accel();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity_status_updated;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">std::vector&lt;openscenario_msgs::msg::EntityStatus&gt;<sp/>ActionNode::getOtherEntityStatus(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>lanelet_id)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>std::vector&lt;openscenario_msgs::msg::EntityStatus&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>status<sp/>:<sp/>other_entity_status)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status.second.lanelet_pose_valid)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status.second.lanelet_pose.lanelet_id<sp/>==<sp/>lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(status.second);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">boost::optional&lt;double&gt;<sp/>ActionNode::getYieldStopDistance(</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>following_lanelets)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>std::set&lt;double&gt;<sp/>dists;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>lanelet<sp/>:<sp/>following_lanelets)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right_of_way_ids<sp/>=<sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getRightOfWayLaneletIds(lanelet);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right_of_way_id<sp/>:<sp/>right_of_way_ids)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>other_status<sp/>=<sp/>getOtherEntityStatus(right_of_way_id);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other_status.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getLongitudinalDistance(</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_status.lanelet_pose.lanelet_id,<sp/>entity_status.lanelet_pose.s,<sp/>lanelet,<sp/>0);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dists.insert(distance.get());</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dists.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*dists.begin();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">std::vector&lt;openscenario_msgs::msg::EntityStatus&gt;<sp/>ActionNode::getRightOfWayEntities(</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>following_lanelets)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>std::vector&lt;openscenario_msgs::msg::EntityStatus&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet_ids_list<sp/>=<sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getRightOfWayLaneletIds(following_lanelets);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>status<sp/>:<sp/>other_entity_status)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>following_lanelet<sp/>:<sp/>following_lanelets)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>&amp;<sp/>lanelet_id<sp/>:<sp/>lanelet_ids_list.at(following_lanelet))<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lanelet_id<sp/>==<sp/>status.second.lanelet_pose.lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(status.second);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">std::vector&lt;openscenario_msgs::msg::EntityStatus&gt;<sp/>ActionNode::getRightOfWayEntities()</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>std::vector&lt;openscenario_msgs::msg::EntityStatus&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet_ids<sp/>=</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getRightOfWayLaneletIds(entity_status.lanelet_pose.lanelet_id);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lanelet_ids.empty())<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>status<sp/>:<sp/>other_entity_status)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>&amp;<sp/>lanelet_id<sp/>:<sp/>lanelet_ids)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lanelet_id<sp/>==<sp/>status.second.lanelet_pose.lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(status.second);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">boost::optional&lt;double&gt;<sp/>ActionNode::getDistanceToTrafficLightStopLine(</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>route_lanelets,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>&amp;<sp/>waypoints)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>traffic_light_ids<sp/>=<sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getTrafficLightIdsOnPath(route_lanelets);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(traffic_light_ids.empty())<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>std::set&lt;double&gt;<sp/>collision_points<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>:<sp/>traffic_light_ids)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>color<sp/>=<sp/>traffic_light_manager-&gt;getColor(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>==<sp/>traffic_simulator::TrafficLightColor::RED<sp/>||</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>==<sp/>traffic_simulator::TrafficLightColor::YELLOW)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>collision_point<sp/>=<sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getDistanceToTrafficLightStopLine(waypoints,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collision_point)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collision_points.insert(collision_point.get());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collision_points.empty())<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*collision_points.begin();</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">boost::optional&lt;double&gt;<sp/>ActionNode::getDistanceToStopLine(</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>route_lanelets,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>&amp;<sp/>waypoints)</highlight></codeline>
<codeline lineno="188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getDistanceToStopLine(route_lanelets,<sp/>waypoints);</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">boost::optional&lt;double&gt;<sp/>ActionNode::getDistanceToFrontEntity()</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getFrontEntityStatus();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getLongitudinalDistance(entity_status.lanelet_pose,<sp/>status-&gt;lanelet_pose);</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">boost::optional&lt;openscenario_msgs::msg::EntityStatus&gt;<sp/>ActionNode::getFrontEntityStatus()</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>boost::optional&lt;double&gt;<sp/>front_entity_distance,<sp/>front_entity_speed;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>std::string<sp/>front_entity_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>each<sp/>:<sp/>other_entity_status)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entity_status.lanelet_pose_valid<sp/>||<sp/>!each.second.lanelet_pose_valid)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::optional&lt;double&gt;<sp/>distance<sp/>=</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getLongitudinalDistance(entity_status.lanelet_pose,<sp/>each.second.lanelet_pose);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance.get()<sp/>&lt;<sp/>40)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!front_entity_distance<sp/>&amp;&amp;<sp/>!front_entity_speed)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>front_entity_speed<sp/>=<sp/>each.second.action_status.twist.linear.x;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>front_entity_distance<sp/>=<sp/>distance.get();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>front_entity_name<sp/>=<sp/>each.first;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(front_entity_distance.get()<sp/>&gt;<sp/>distance.get())<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>front_entity_speed<sp/>=<sp/>each.second.action_status.twist.linear.x;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>front_entity_distance<sp/>=<sp/>distance.get();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>front_entity_name<sp/>=<sp/>each.first;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!front_entity_distance<sp/>&amp;&amp;<sp/>!front_entity_speed)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>other_entity_status[front_entity_name];</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">boost::optional&lt;double&gt;<sp/>ActionNode::getDistanceToConflictingEntity(</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>route_lanelets,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtraffic__simulator_1_1math_1_1CatmullRomSpline" kindref="compound">traffic_simulator::math::CatmullRomSpline</ref><sp/>&amp;<sp/>spline)</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conflicting_entity_status<sp/>=<sp/>getConflictingEntityStatusOnRoute(route_lanelets);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(conflicting_entity_status.empty())<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>std::set&lt;double&gt;<sp/>distances;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>:<sp/>conflicting_entity_status)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status.lanelet_pose_valid)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>polygon<sp/>=<sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getLaneletPolygon(status.lanelet_pose.lanelet_id);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>spline.getCollisionPointIn2D(polygon);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distances.insert(s.get());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distances.empty())<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*distances.begin();</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">boost::optional&lt;double&gt;<sp/>ActionNode::getDistanceToConflictingEntity(</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>following_lanelets)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="259"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conflicting_entity_status<sp/>=<sp/>getConflictingEntityStatus(following_lanelets);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!conflicting_entity_status)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>dists;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;int,<sp/>double&gt;&gt;<sp/>collision_points;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>lanelet_id<sp/>:<sp/>following_lanelets)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stop_position_s<sp/>=<sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getCollisionPointInLaneCoordinate(</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lanelet_id,<sp/>conflicting_entity_status-&gt;lanelet_pose.lanelet_id);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stop_position_s)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getLongitudinalDistance(</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_status.lanelet_pose.lanelet_id,<sp/>entity_status.lanelet_pose.s,<sp/>lanelet_id,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop_position_s.get());</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dists.push_back(dist.get());</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collision_points.push_back(std::make_pair(lanelet_id,<sp/>stop_position_s.get()));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dists.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>std::min_element(dists.begin(),<sp/>dists.end());</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>std::distance(dists.begin(),<sp/>iter);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stop_s<sp/>=<sp/>collision_points[index].second;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>std::int64_t<sp/>stop_lanelet_id<sp/>=<sp/>collision_points[index].first;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Vector3<sp/>rpy;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Twist<sp/>twist;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Accel<sp/>accel;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>openscenario_msgs::msg::EntityStatus<sp/>stop_target_status;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>stop_target_status.lanelet_pose.lanelet_id<sp/>=<sp/>stop_lanelet_id;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>stop_target_status.lanelet_pose.s<sp/>=<sp/>stop_s;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>stop_target_status.lanelet_pose.rpy<sp/>=<sp/>rpy;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>stop_target_status.action_status.twist<sp/>=<sp/>twist;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>stop_target_status.action_status.accel<sp/>=<sp/>accel;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dist_to_stop_target<sp/>=<sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getLongitudinalDistance(</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entity_status.lanelet_pose.lanelet_id,<sp/>entity_status.lanelet_pose.s,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stop_target_status.lanelet_pose.lanelet_id,<sp/>stop_target_status.lanelet_pose.s);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dist_to_stop_target;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">std::vector&lt;openscenario_msgs::msg::EntityStatus&gt;<sp/>ActionNode::getConflictingEntityStatusOnRoute(</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>route_lanelets)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="303"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conflicting_crosswalks<sp/>=<sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getConflictingCrosswalkIds(route_lanelets);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>std::vector&lt;openscenario_msgs::msg::EntityStatus&gt;<sp/>conflicting_entity_status;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>status<sp/>:<sp/>other_entity_status)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::count(</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conflicting_crosswalks.begin(),<sp/>conflicting_crosswalks.end(),</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status.second.lanelet_pose.lanelet_id)<sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>conflicting_entity_status.push_back(status.second);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>conflicting_entity_status;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">boost::optional&lt;openscenario_msgs::msg::EntityStatus&gt;<sp/>ActionNode::getConflictingEntityStatus(</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>following_lanelets)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="319"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conflicting_crosswalks<sp/>=<sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getConflictingCrosswalkIds(following_lanelets);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>std::vector&lt;openscenario_msgs::msg::EntityStatus&gt;<sp/>conflicting_entity_status;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>status<sp/>:<sp/>other_entity_status)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::count(</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conflicting_crosswalks.begin(),<sp/>conflicting_crosswalks.end(),</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status.second.lanelet_pose.lanelet_id)<sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>conflicting_entity_status.push_back(status.second);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>dists;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;int,<sp/>double&gt;&gt;<sp/>collision_points;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>status<sp/>:<sp/>conflicting_entity_status)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>lanelet_id<sp/>:<sp/>following_lanelets)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stop_position_s<sp/>=</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getCollisionPointInLaneCoordinate(lanelet_id,<sp/>status.lanelet_pose.lanelet_id);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stop_position_s)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getLongitudinalDistance(</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_status.lanelet_pose.lanelet_id,<sp/>entity_status.lanelet_pose.s,<sp/>lanelet_id,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop_position_s.get());</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dists.push_back(dist.get());</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collision_points.push_back(std::make_pair(lanelet_id,<sp/>stop_position_s.get()));</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dists.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>std::max_element(dists.begin(),<sp/>dists.end());</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>std::distance(dists.begin(),<sp/>iter);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stop_s<sp/>=<sp/>collision_points[index].second;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>std::int64_t<sp/>stop_lanelet_id<sp/>=<sp/>collision_points[index].first;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Vector3<sp/>rpy;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Twist<sp/>twist;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Accel<sp/>accel;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>openscenario_msgs::msg::EntityStatus<sp/>conflicting_entity_status;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>conflicting_entity_status.lanelet_pose.lanelet_id<sp/>=<sp/>stop_lanelet_id;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>conflicting_entity_status.lanelet_pose.s<sp/>=<sp/>stop_s;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>conflicting_entity_status.lanelet_pose.offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>conflicting_entity_status.lanelet_pose.rpy<sp/>=<sp/>rpy;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>conflicting_entity_status.action_status.twist<sp/>=<sp/>twist;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>conflicting_entity_status.action_status.accel<sp/>=<sp/>accel;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>conflicting_entity_status.pose<sp/>=</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;toMapPose(conflicting_entity_status.lanelet_pose).pose;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>conflicting_entity_status;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ActionNode::foundConflictingEntity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>following_lanelets)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="370"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conflicting_crosswalks<sp/>=<sp/><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref>-&gt;getConflictingCrosswalkIds(following_lanelets);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>status<sp/>:<sp/>other_entity_status)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::count(</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conflicting_crosswalks.begin(),<sp/>conflicting_crosswalks.end(),</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status.second.lanelet_pose.lanelet_id)<sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ActionNode::calculateStopDistance()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="384"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pow(entity_status.action_status.twist.linear.x,<sp/>2)<sp/>/<sp/>(2<sp/>*<sp/>5);</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>entity_behavior</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/behavior/action_node.cpp"/>
  </compounddef>
</doxygen>
